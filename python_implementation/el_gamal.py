# -*- coding: utf-8 -*-
"""el_gamal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16wjFfjq1mYbJ4IBC43sTA4BKhf3VM7CI

# Implementação do Algoritmo de Algoritmo de Chave Pública - El Gamal
## CBSI - UFPA
## Disciplina: Tópicos especiais em computação I - Segurança da Informação
## Prof: Roberto Samarone
## Estudante: Pedro Paulo Lisboa de Sousa - 201711140038

### Tarefa: Implementar o Algoritmo de Chave Pública - El Gamal
"""

import random


class ElGamal:

    def __mdc(self, numero_esq, numero_dir, resto=0):
        numero_esq, numero_dir = numero_dir, numero_esq % numero_dir
        resto = numero_esq % numero_dir
        if resto != 0:
            return self.__mdc(numero_esq, numero_dir, resto)
        else:
            return numero_dir

    def gerar_chave(self, numero):
        chave = self.__gerar_numero_aleatorio(numero)
        while self.__mdc(numero, chave) != 1:
            chave = self.__gerar_numero_aleatorio(numero)
        return chave

    def __gerar_numero_aleatorio(self, numero):
        return random.randint(pow(10, 20), numero)

    def expoente_modular(self, a, b, c):
        x, y = 1, a
        while b > 0:
            if b % 2 == 0:
                x = self.__gerar_mod(c, x, y)
            y = self.__gerar_mod(c, y, y)
            b = int(b / 2)
        return x % c

    def __gerar_mod(self, c, x, y):
        return (x * y) % c

    def criptografar_mensagem(self, msg, q, h, g):
        k = self.gerar_chave(q)
        s = self.expoente_modular(h, k, q)
        p = self.expoente_modular(g, k, q)
        ct = [msg[i] for i in range(0, len(msg))]
        print("g^k = ", p)
        print("g^ak = ", s)
        for i in range(0, len(ct)):
            ct[i] = s * ord(ct[i])
        return ct, p

    def decifrar(self, ct, p, key, q):
        h = self.expoente_modular(p, key, q)
        pt = [chr(int(ct[i] / h)) for i in range(0, len(ct))]
        return pt


def main():
    el = ElGamal()

    mensagem = 'Há vagas nessa joça'

    # Numero muito grande
    q = random.randint(pow(10, 20), pow(10, 50))
    # elemento qualquer
    g = random.randint(2, q)

    # chave privada
    key = el.gerar_chave(q)
    h = el.expoente_modular(g, key, q)
    print("g: ", g)
    print("g^a : ", h)

    mensagem_cifrada, p = el.criptografar_mensagem(mensagem, q, h, g)
    elementos_mensagem_decifrada = el.decifrar(mensagem_cifrada, p, key, q)
    mensagem_decifrada = ''.join(elementos_mensagem_decifrada)
    print(f'Mensagem Original: {mensagem}')
    print(f'Mensagem criptografada: {mensagem_cifrada}')
    print(f"Mensagem decifrada: {mensagem_decifrada}")


if __name__ == '__main__':
    main()
